class Solution {

    int[] dirR = { -1, 1, 0, 0 };
    int[] dirC = { 0, 0, -1, 1 };

    public void dfs(char[][] board, int[][] visi, int row, int col, int n, int m) {
        visi[row][col] = 1;

        for (int i = 0; i < 4; i++) {
            int nrow = row + dirR[i];
            int ncol = col + dirC[i];

            if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && visi[nrow][ncol] == 0 && board[nrow][ncol] == 'O') {
                dfs(board, visi, nrow, ncol, n, m);
            }
        }
    }

    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;

        int[][] visi = new int[n][m];

     
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 || j == 0 || i == n - 1 || j == m - 1) {
                    if (board[i][j] == 'O' && visi[i][j] == 0) {
                        dfs(board, visi, i, j, n, m);
                    }
                }
            }
        }

      
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (visi[i][j] == 0 && board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
}
